// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.40.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are not used by any `pub` functions: `Elapsed`, `InsertError`, `Kind`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< Error>>
abstract class Error implements RustOpaqueInterface {
  /// Creates an error representing a timer at capacity.
  static Future<Error> atCapacity() =>
      RustLib.instance.api.tokioTimeErrorErrorAtCapacity();

  /// Creates an error representing a misconfigured timer.
  static Future<Error> invalid() =>
      RustLib.instance.api.tokioTimeErrorErrorInvalid();

  /// Returns `true` if the error was caused by the timer being at capacity.
  Future<bool> isAtCapacity();

  /// Returns true if the error is related to the request or response body
  Future<bool> isBody();

  /// Returns true if the error is from a type Builder.
  Future<bool> isBuilder();

  /// Returns true if the error is related to connect
  Future<bool> isConnect();

  /// Returns true if the error is related to decoding the response's body
  Future<bool> isDecode();

  /// Returns `true` if the error was caused by the timer being misconfigured.
  Future<bool> isInvalid();

  /// Returns true if the error is from a `RedirectPolicy`.
  Future<bool> isRedirect();

  /// Returns true if the error is related to the request
  Future<bool> isRequest();

  /// Returns `true` if the error was caused by the timer being shutdown.
  Future<bool> isShutdown();

  /// Returns true if the error is from `Response::error_for_status`.
  Future<bool> isStatus();

  /// Returns true if the error is related to a timeout.
  Future<bool> isTimeout();

  /// Creates an error representing a shutdown timer.
  static Future<Error> shutdown() =>
      RustLib.instance.api.tokioTimeErrorErrorShutdown();

  /// Returns the status code, if the error was generated from a response.
  Future<StatusCode?> status();

  /// Returns a possible URL related to this error.
  ///
  /// # Examples
  ///
  /// ```
  /// # async fn run() {
  /// // displays last stop of a redirect loop
  /// let response = reqwest::get("http://site.with.redirect.loop").await;
  /// if let Err(e) = response {
  ///     if e.is_redirect() {
  ///         if let Some(final_stop) = e.url() {
  ///             println!("redirect loop at {final_stop}");
  ///         }
  ///     }
  /// }
  /// # }
  /// ```
  Future<Url?> url();

  /// Returns a mutable reference to the URL related to this error
  ///
  /// This is useful if you need to remove sensitive information from the URL
  /// (e.g. an API key in the query), but do not want to remove the URL
  /// entirely.
  Future<Url?> urlMut();
}
