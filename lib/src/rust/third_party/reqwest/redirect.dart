// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.40.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they have generic arguments: `custom`, `error`
// These types are ignored because they are not used by any `pub` functions: `ActionKind`, `PolicyKind`, `TooManyRedirects`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `follow`, `previous`, `status`, `stop`, `url`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Action>>
abstract class Action implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Attempt>>
abstract class Attempt implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Policy>>
abstract class Policy implements RustOpaqueInterface {
  /// Create a `Policy` with a maximum number of redirects.
  ///
  /// An `Error` will be returned if the max is reached.
  static Future<Policy> limited({required BigInt max}) =>
      RustLib.instance.api.reqwestRedirectPolicyLimited(max: max);

  /// Create a `Policy` that does not follow any redirect.
  static Future<Policy> none() =>
      RustLib.instance.api.reqwestRedirectPolicyNone();

  /// Apply this policy to a given [`Attempt`] to produce a [`Action`].
  ///
  /// # Note
  ///
  /// This method can be used together with `Policy::custom()`
  /// to construct one `Policy` that wraps another.
  ///
  /// # Example
  ///
  /// ```rust
  /// # use reqwest::{Error, redirect};
  /// #
  /// # fn run() -> Result<(), Error> {
  /// let custom = redirect::Policy::custom(|attempt| {
  ///     eprintln!("{}, Location: {:?}", attempt.status(), attempt.url());
  ///     redirect::Policy::default().redirect(attempt)
  /// });
  /// # Ok(())
  /// # }
  /// ```
  Future<Action> redirect({required Attempt attempt});
}
